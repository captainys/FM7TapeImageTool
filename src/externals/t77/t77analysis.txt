T77ファイルフォーマットって公式があったのか。無いと思って自分で調べちゃったよ。でも、大体合ってたみたいだ。



多分、 T77 は Level Duration Level Duration の繰り返し。
1バイトが36バイトになっているようだ。これは、Up Tup Dwn Tdwnが9回繰り返し。だとすると、多分1ビットはパリティ。

あ、1バイトは11ビットで表現されてるっぽい。36バイトじゃなく44バイトだ。

どうも、徹頭徹尾11ビット単位のようだ。これは、ダンプ取ったが良さそうだ。



00 00はモーターが止まった？いや、頭出しか？

最初のリードはShort*1 Long*10が255回。

どうも、ビット順はbit0(下位)から入ってるっぽいぞ。

最初の45ビット
0 1 0 0 0 0 0 0 0 1 
1 0 0 0 1 1 1 1 0 0
1 1 0 0 0 0 0 0 0 0
0 1 1 0 0 0 1 0 1 0
0 0 1 1 0 'T'

0 1 0 0 0 0 0 0 0 1 1   0x01
0 0 0 1 1 1 1 0 0 1 1   0x3c ('<')
0 0 0 0 0 0 0 0 0 1 1   0x00
0 0 0 1 0 1 0 0 0 1 1   0x14
0 'T'

これって、'T'が45ビット目からはじまるんじゃなくて、各バイトが必ず0で始まって、11で終わってんじゃないの？


リード後45HighLow後'T'
        56         'E'
        67         'S'
        78         'T'
        89         ' '
        100        ' '
        111        ' '
        122        ' '

と、すると、+33,+22,+11に意味があるのか？どちらかというと、多分リード終了という意味だな。

逆に、133、144、155は？意味がわからん。
		133			0x02  (0100000011)
		144			0x00  (0000000011)
		155			0x00
		155			0x00
		177			0x00
		188			0x00
		199			0x00
		210			0x00
		221			0x00
		232			0x00
		243			0x00
		254			0x00

		264			0xd6 (00110101111)  <- ?
		275			0xff (01111111111)
		286			0xff (01111111111)
		297			0xff (01111111111)
		308			0xff (01111111111)
		319			0xff (01111111111)

		3124		0x01 (01000000011)
		3135		0x3c (00011110011)
		3146		0x01
		3157		0xff
					0x00
					0x01
					0x00
					0x10
					0x00
					0xff
					0xff

					Lead

		5973		0x17
					0xff
					0xff

					Lead






先頭は0010から？7FFFは本当にHIがFF続いている。
00000000  58 4D 37 20  54 41 50 45  20 49 4D 41  47 45 20 30 XM7 TAPE IMAGE 0
00000010  00 00 7F FF  80 1A 00 1A  80 30 00 30  80 30 00 30 ........0.0.0.0
00000020  80 30 00 30  80 30 00 30  80 30 00 30  80 30 00 30 .0.0.0.0.0.0.0.0
00000030  80 30 00 30  80 30 00 31  80 2F 00 37  80 2F 00 34 .0.0.0.1./.7./.4
00000040  80 1A 00 1A  80 30 00 30  80 30 00 30  80 30 00 30 .....0.0.0.0.0.0
00000050  80 30 00 30  80 30 00 30  80 30 00 30  80 30 00 30 .0.0.0.0.0.0.0.0
00000060  80 30 00 31  80 2F 00 37  80 2F 00 34  80 1A 00 1A .0.1./.7./.4....
00000070  80 30 00 30  80 30 00 30  80 30 00 30  80 30 00 30 .0.0.0.0.0.0.0.0
00000080  80 30 00 30  80 30 00 30  80 30 00 30  80 30 00 31 .0.0.0.0.0.0.0.1
00000090  80 2F 00 37  80 2F 00 34  80 1A 00 1A  80 30 00 30 ./.7./.4.....0.0
000000a0  80 30 00 30  80 30 00 30  80 30 00 30  80 30 00 30 .0.0.0.0.0.0.0.0
000000b0  80 30 00 30  80 30 00 30  80 30 00 31  80 2F 00 37 .0.0.0.0.0.1./.7
000000c0  80 2F 00 34  80 1A 00 1A  80 30 00 30  80 30 00 30 ./.4.....0.0.0.0
000000d0  80 30 00 30  80 30 00 30  80 30 00 30  80 30 00 30 .0.0.0.0.0.0.0.0
000000e0  80 30 00 30  80 30 00 31  80 2F 00 37  80 2F 00 34 .0.0.0.1./.7./.4
000000f0  80 1A 00 1A  80 30 00 30  80 30 00 30  80 30 00 30 .....0.0.0.0.0.0


00 FF 00 FF 00 FF 00 FF ....

00006000  00 1A 80 18  00 1A 80 18  00 1A 80 18  00 1A 80 18 ................
00006010  00 1A 80 18  00 1A 80 18  00 1A 80 18  00 1A 80 18 ................
00006020  00 1A 80 2F  00 37 80 2F  00 34 80 1A  00 1A 80 30 .../.7./.4.....0
00006030  00 30 80 30  00 30 80 30  00 30 80 30  00 30 80 30 .0.0.0.0.0.0.0.0
00006040  00 30 80 30  00 30 80 30  00 30 80 30  00 31 80 2F .0.0.0.0.0.0.1./
00006050  00 37 80 2F  00 34 80 1A  00 1A 80 18  00 1A 80 18 .7./.4..........
00006060  00 1A 80 18  00 1A 80 18  00 1A 80 18  00 1A 80 18 ................
00006070  00 1A 80 18  00 1A 80 18  00 1A 80 2F  00 37 80 2F .........../.7./
00006080  00 34 80 1A  00 1A 80 30  00 30 80 30  00 30 80 30 .4.....0.0.0.0.0
00006090  00 30 80 30  00 30 80 30  00 30 80 30  00 30 80 30 .0.0.0.0.0.0.0.0
000060a0  00 30 80 30  00 31 80 2F  00 37 80 2F  00 34 80 1A .0.0.1./.7./.4..
000060b0  00 1A 80 18  00 1A 80 18  00 1A 80 18  00 1A 80 18 ................
000060c0  00 1A 80 18  00 1A 80 18  00 1A 80 18  00 1A 80 18 ................
000060d0  00 1A 80 2F  00 37 80 2F  00 34 80 1A  00 1A 80 30 .../.7./.4.....0
000060e0  00 30 80 30  00 30 80 30  00 30 80 30  00 30 80 30 .0.0.0.0.0.0.0.0
000060f0  00 30 80 30  00 30 80 30  00 30 80 30  00 31 80 2F .0.0.0.0.0.0.1./



FF FF FF FF FF FF FF FF ....

00006000  00 1A 80 30  00 30 80 30  00 30 80 30  00 30 80 30 ...0.0.0.0.0.0.0
00006010  00 30 80 30  00 30 80 30  00 30 80 30  00 30 80 30 .0.0.0.0.0.0.0.0
00006020  00 31 80 2F  00 37 80 2F  00 34 80 1A  00 1A 80 30 .1./.7./.4.....0
00006030  00 30 80 30  00 30 80 30  00 30 80 30  00 30 80 30 .0.0.0.0.0.0.0.0
00006040  00 30 80 30  00 30 80 30  00 30 80 30  00 31 80 2F .0.0.0.0.0.0.1./
00006050  00 37 80 2F  00 34 80 1A  00 1A 80 30  00 30 80 30 .7./.4.....0.0.0
00006060  00 30 80 30  00 30 80 30  00 30 80 30  00 30 80 30 .0.0.0.0.0.0.0.0
00006070  00 30 80 30  00 30 80 30  00 31 80 2F  00 37 80 2F .0.0.0.0.1./.7./
00006080  00 34 80 1A  00 1A 80 30  00 30 80 30  00 30 80 30 .4.....0.0.0.0.0
00006090  00 30 80 30  00 30 80 30  00 30 80 30  00 30 80 30 .0.0.0.0.0.0.0.0
000060a0  00 30 80 30  00 31 80 2F  00 37 80 2F  00 34 80 1A .0.0.1./.7./.4..
000060b0  00 1A 80 30  00 30 80 30  00 30 80 30  00 30 80 30 ...0.0.0.0.0.0.0
000060c0  00 30 80 30  00 30 80 30  00 30 80 30  00 30 80 30 .0.0.0.0.0.0.0.0
000060d0  00 31 80 2F  00 37 80 2F  00 34 80 1A  00 1A 80 30 .1./.7./.4.....0
000060e0  00 30 80 30  00 30 80 30  00 30 80 30  00 30 80 30 .0.0.0.0.0.0.0.0
000060f0  00 30 80 30  00 30 80 30  00 30 80 30  00 31 80 2F .0.0.0.0.0.0.1./



解明したと思う。

0xffの連続は、ブロック開始前の合図。とりあえずリードと命名。

リードに続いて、

0x01 0x3c

がブロックの開始。次の1バイトが、

0x00	ヘッダ(ファイル名など)
0x01	データ
0xff	最終ブロック

その次の1バイトがデータサイズ。 (nByte)。最終ブロックはサイズは必ず0。ヘッダブロックは、必ず20(0x14)。

次にnByteのデータがあって、その次の1バイトがチェックサム。

1ブロックは、

0x01 0x3c type nByte データ checksum

で構成されていて、合計サイズが5+nByte。

checksumは、ブロックの最初の2倍とと最後の1バイトを除いた、type, nByte, データのそれぞれのバイトを合計した値の下位8ビットを取ったもの。

ブロックとブロックの間には、リード。サイズは、

ファイル先頭		256バイトの0xff
ヘッダブロック後	259バイトの0xff
データブロック間	バイナリファイルの場合、14 (0x0e)バイト。
					ASCIIファイルの場合、259バイト。
最終ブロック後		4バイトの0xff (最終ブロックは、タイプが0xff、サイズが0だから、チェックサムが自動的に0xffになるから、5バイトの0xffが続いているように見える。)


ヘッダブロック
8 bytes		ファイル名。8文字未満の場合は、0x20で8バイトまで埋める。
3 bytes		ファイルタイプ。
			マシン語の場合	0x02 0x00 0x00
            バイナリBASIC   0x00 0x00 0x00
			ASCII形式BASIC	0x00 0xff 0xff
            ASCII形式データ 0x01 0xff 0xff
            バイナリ形式データというのが存在するのか不明。
9 bytes		ゼロ。何のためにあるのか不明。

ASCII形式ファイルの改行コードは0x0dのみのようだ。なお、必ず最初の1バイトは0x0dらしい。ディスクにセーブするときは0x0d 0x0aだったと思う。




マシン語の場合、データは、
1byte		0x00		必ず0
2bytes					ファイルサイズ。実際にメモリに展開されるバイト数。例えば、savem "data",&H1000,&H01FF,&H1000だったら、0x20, 0x00が入る。
2bytes					メモリ上の開始位置。実行位置じゃなくて、最初のバイトがストアされるアドレス。
nBytes					データ
3bytes		0xff,0x00,0x00
2bytes					実行アドレス。

だから、実際にメモリに展開されるバイト数がnByteだったら、nByte+10バイトのデータが必要。




T77ファイル
14bytes		"XM7 TAPE IMAGE"
2 bytes		0x20 0x30			必ずこれ？
2 bytes		0x00 0x00			早送りとか巻き戻しの停止ポイントらしい
2 bytes		0x7f 0xff			多分無音区間らしい
4 bytes		bit
4 bytes		bit
4 bytes		bit
4 bytes		bit
4 bytes		bit
4 bytes		bit
         :
         :

bitはゼロの場合、	0x80 0x1a 0x00 0x1a
1の場合、			0x80 0x30 0x00 0x30

多分、0x80がHigh, 0x00がLow, 0x1aと0x30は2ms×この値が時間になるんだと思うんだけど。と、思ったら、Audacityで見たら、0x30が0.42ms、0x1aが0.22msぐらいのようだ。FM-7って2msタイマじゃなかったっけ？約1600bpsだったはずだから、、、、確かに1ビットが0.625ms。このタイマ使ってたら追い付かないな。BUSY WAITでやってたのかな？テープ読み込み中タイマ割り込みが使えなくなるのは、BUSY WAITの邪魔になるからだったのか。てっきり割り込み使って時間計測してるんだと思ってた。

44100Hzだと、1秒間に44100サンプル。0.42msだと、19サンプル、0.22msだと10サンプルのはず。

T772WAVの出したWAVを見ると、0x1aが10サンプル、0x30が19サンプル。合ってる合ってる。
