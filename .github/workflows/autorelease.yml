name: Auto Release with Tag

on:
  push:
    tags:
      - 'v*' # Run if tagged as v*.

jobs:
  build-windows:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
    - name: checkout_public_libraries
      run: git clone https://github.com/captainys/public.git
      working-directory: .
    - name: mkdir
      run: mkdir ci_windows
    - name: build
      run: |
          cmake ../src
          cmake --build . --config Release --target soundcrest --parallel
      working-directory: ./ci_windows
    - name: make_zip
      run: |
          cmake -E copy ./gui/Release/soundcrest.exe .
          cmake -E copy ../README.md .
          cmake -E copy ../LICENSE .
          cmake -E copy_directory ../rc ./rc
          cmake -E tar cvf windows_binary_latest.zip --format=zip soundcrest.exe README.md LICENSE rc
      working-directory: ./ci_windows

    - name: upload_to_artifact
      uses: actions/upload-artifact@v1
      with:
          name: Windows-Binary
          path: ci_windows/windows_binary_latest.zip



  build-linux:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: checkout_public_libraries
      run: git clone https://github.com/captainys/public.git
      working-directory: .
    - name: mkdir
      run: mkdir ci_ubuntu
    - name: install-OpenGL
      run: |
          sudo apt-get update
          sudo apt-get install libglu1-mesa-dev mesa-common-dev
    - name: install-ALSA
      run: sudo apt-get install libasound2 libasound2-dev
    - name: build
      run: |
          cmake ../src -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --target soundcrest --parallel
      working-directory: ./ci_ubuntu

    - name: make_zip
      run: |
          cmake -E copy ./gui/soundcrest .
          cmake -E copy ../README.md .
          cmake -E copy ../LICENSE .
          cmake -E copy_directory ../rc ./rc
          cmake -E tar cvf ubuntu_binary_latest.zip --format=zip soundcrest README.md LICENSE rc
      working-directory: ./ci_ubuntu

    - name: upload_to_artifact
      uses: actions/upload-artifact@v1
      with:
          name: Ubuntu-Binary
          path: ci_ubuntu/ubuntu_binary_latest.zip



  build-macos:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: checkout_public_libraries
      run: git clone https://github.com/captainys/public.git
      working-directory: .
    - name: mkdir
      run: mkdir ci_macos
    - name: build
      run: |
          cmake ../src -DCMAKE_BUILD_TYPE=Release
          cmake --build . --config Release --target soundcrest --parallel
      working-directory: ./ci_macos
    - name: make_zip
      run: |
          cmake -E copy_directory ./gui/soundcrest.app ./soundcrest.app
          cmake -E copy ../README.md .
          cmake -E copy ../LICENSE .
          cmake -E copy_directory ../rc ./rc
          cmake -E tar cvf macos_binary_latest.zip --format=zip soundcrest.app README.md LICENSE rc
      working-directory: ./ci_macos

    - name: upload_to_artifact
      uses: actions/upload-artifact@v1
      with:
          name: Macos-Binary
          path: ci_macos/macos_binary_latest.zip


  after-build:
    needs: [build-windows, build-linux, build-macos]

    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: Windows-Binary

    - uses: actions/download-artifact@v4
      with:
        name: Ubuntu-Binary

    - uses: actions/download-artifact@v4
      with:
        name: Macos-Binary

    - name: Verify files
      run: ls -l

    # https://github.com/actions/upload-release-asset
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Auto Release ${{ github.ref }}
        draft: false
        prerelease: true
    - name: Upload Windows Binary
      id: upload-windows-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows_binary_latest.zip
        asset_name: windows_binary_latest.zip
        asset_content_type: application/zip

    - name: Upload Ubuntu Binary
      id: upload-ubuntu-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ubuntu_binary_latest.zip
        asset_name: ubuntu_binary_latest.zip
        asset_content_type: application/zip

    - name: Upload macOS Binary
      id: upload-macOS-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos_binary_latest.zip
        asset_name: macos_binary_latest.zip
        asset_content_type: application/zip

